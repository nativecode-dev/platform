// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NativeCode.Node.Media;

namespace NativeCode.Node.Media.Migrations
{
    [DbContext(typeof(MediaDataContext))]
    [Migration("20181227013835_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NativeCode.Node.Media.Data.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<byte[]>("SshPrivateKey");

                    b.Property<byte[]>("SshPublicKey");

                    b.Property<int>("Type");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.ToTable("Credential");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Library.Plex.PlexLibrarySource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.ToTable("PlexLibrarySources");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Library.Plex.PlexServerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Host");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<Guid?>("PlexLibrarySourceId");

                    b.Property<int>("Port");

                    b.Property<string>("Token");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("PlexLibrarySourceId");

                    b.ToTable("PlexServerInfo");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Metadata.MetadataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Agent");

                    b.Property<string>("CacheUrl");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<Guid?>("EpisodeId");

                    b.Property<Guid?>("MovieId");

                    b.Property<string>("Provider");

                    b.Property<string>("SourceUrl");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.ToTable("MetadataSource");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Movies.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<Guid?>("MovieCollectionId");

                    b.Property<Guid?>("ReleaseInfoId");

                    b.Property<string>("SortTitle");

                    b.Property<string>("Title");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("MovieCollectionId");

                    b.HasIndex("ReleaseInfoId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Movies.MovieCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("SortTitle");

                    b.Property<string>("Title");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.ToTable("MovieCollections");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.ReleaseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("AnnounceDate");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<DateTimeOffset?>("PublishDate");

                    b.Property<DateTimeOffset?>("ReleaseDate");

                    b.Property<DateTimeOffset?>("StreamDate");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.ToTable("ReleaseInfo");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Series.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<Guid?>("ReleaseInfoId");

                    b.Property<Guid>("SeasonId");

                    b.Property<Guid>("SeriesId");

                    b.Property<string>("SortTitle");

                    b.Property<string>("Title");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseInfoId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Series.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<Guid>("SeriesId");

                    b.Property<string>("SortTitle");

                    b.Property<string>("Title");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Series.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<Guid?>("ReleaseInfoId");

                    b.Property<string>("SortTitle");

                    b.Property<string>("Title");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseInfoId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Storage.Mount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CredentialId");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("MountType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("CredentialId");

                    b.ToTable("Mounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dfb9a8fb-320a-4d09-a70f-68184cd10723"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Host = "nas01.in.nativecode.com",
                            MountType = 1,
                            Name = "NAS01"
                        },
                        new
                        {
                            Id = new Guid("cd7cebdb-bbb5-4133-a7c4-fa3c700d110c"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Host = "qnap.in.nativecode.com",
                            MountType = 1,
                            Name = "QNAP"
                        },
                        new
                        {
                            Id = new Guid("4db231d2-a895-4128-a1a6-295c0fcfed91"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Host = "storage.in.nativecode.com",
                            MountType = 1,
                            Name = "STORAGE"
                        });
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Storage.MountPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<Guid>("MountId");

                    b.Property<string>("Path");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("MountId");

                    b.ToTable("MountPath");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1adc9bd6-ea41-44db-88d6-525550f69dec"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MountId = new Guid("dfb9a8fb-320a-4d09-a70f-68184cd10723"),
                            Path = "/"
                        },
                        new
                        {
                            Id = new Guid("826a7e0a-7b2b-4fa2-b10f-f2b94cd4783e"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MountId = new Guid("dfb9a8fb-320a-4d09-a70f-68184cd10723"),
                            Path = "/Movies"
                        },
                        new
                        {
                            Id = new Guid("23f44e25-37f2-4e37-8a99-4584c390ef46"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MountId = new Guid("cd7cebdb-bbb5-4133-a7c4-fa3c700d110c"),
                            Path = "/"
                        },
                        new
                        {
                            Id = new Guid("772ef0c4-decc-4977-8c50-21851398cf1f"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MountId = new Guid("cd7cebdb-bbb5-4133-a7c4-fa3c700d110c"),
                            Path = "/Media/Other"
                        },
                        new
                        {
                            Id = new Guid("16f76922-a237-46b6-8f58-351c19353da1"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MountId = new Guid("4db231d2-a895-4128-a1a6-295c0fcfed91"),
                            Path = "/"
                        },
                        new
                        {
                            Id = new Guid("742c9390-2b9c-4c18-a150-08fc18166263"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MountId = new Guid("4db231d2-a895-4128-a1a6-295c0fcfed91"),
                            Path = "/Media/Shows"
                        });
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Storage.MountPathFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<byte[]>("Hash");

                    b.Property<Guid>("MountPathId");

                    b.Property<long>("Size");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("MountPathId");

                    b.ToTable("MountPathFile");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<Guid?>("EpisodeId");

                    b.Property<Guid?>("MovieCollectionId");

                    b.Property<Guid?>("MovieId");

                    b.Property<string>("Name");

                    b.Property<string>("Normalized");

                    b.Property<Guid?>("SeasonId");

                    b.Property<Guid?>("SeriesId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieCollectionId");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Library.Plex.PlexServerInfo", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.Library.Plex.PlexLibrarySource")
                        .WithMany("PlexServerInfo")
                        .HasForeignKey("PlexLibrarySourceId");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Metadata.MetadataSource", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.Series.Episode")
                        .WithMany("MetadataSources")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("NativeCode.Node.Media.Data.Movies.Movie")
                        .WithMany("MetadataSources")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Movies.Movie", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.Movies.MovieCollection", "MovieCollection")
                        .WithMany("Movies")
                        .HasForeignKey("MovieCollectionId");

                    b.HasOne("NativeCode.Node.Media.Data.ReleaseInfo", "ReleaseInfo")
                        .WithMany()
                        .HasForeignKey("ReleaseInfoId");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Series.Episode", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.ReleaseInfo", "ReleaseInfo")
                        .WithMany()
                        .HasForeignKey("ReleaseInfoId");

                    b.HasOne("NativeCode.Node.Media.Data.Series.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NativeCode.Node.Media.Data.Series.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Series.Season", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.Series.Series", "Series")
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Series.Series", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.ReleaseInfo", "ReleaseInfo")
                        .WithMany()
                        .HasForeignKey("ReleaseInfoId");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Storage.Mount", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.Credential", "Credential")
                        .WithMany()
                        .HasForeignKey("CredentialId");
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Storage.MountPath", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.Storage.Mount", "Mount")
                        .WithMany("MountPaths")
                        .HasForeignKey("MountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Storage.MountPathFile", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.Storage.MountPath", "MountPath")
                        .WithMany("Files")
                        .HasForeignKey("MountPathId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NativeCode.Node.Media.Data.Tag", b =>
                {
                    b.HasOne("NativeCode.Node.Media.Data.Series.Episode")
                        .WithMany("Tags")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("NativeCode.Node.Media.Data.Movies.MovieCollection")
                        .WithMany("Tags")
                        .HasForeignKey("MovieCollectionId");

                    b.HasOne("NativeCode.Node.Media.Data.Movies.Movie")
                        .WithMany("Tags")
                        .HasForeignKey("MovieId");

                    b.HasOne("NativeCode.Node.Media.Data.Series.Season")
                        .WithMany("Tags")
                        .HasForeignKey("SeasonId");

                    b.HasOne("NativeCode.Node.Media.Data.Series.Series")
                        .WithMany("Tags")
                        .HasForeignKey("SeriesId");
                });
#pragma warning restore 612, 618
        }
    }
}
